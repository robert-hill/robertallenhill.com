name: "Staging Terraform"

on:
  pull_request:
    branches:
      - main
    paths:
      - '**.tf'
jobs: 
  terraform-staging:
      name: "Terraform - Staging"
      runs-on: ubuntu-latest
      defaults:
        run: 
          working-directory: "./terraform/staging"
      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - 
          uses: hashicorp/setup-terraform@v1
          with: 
            terraform_version: "1.1.3"
            terraform_wrapper: false
        - 
          name: "Configure AWS Credentials"
          uses: aws-actions/configure-aws-credentials@v1
          with: 
            aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
            aws-region: us-west-2
            aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

        - name: Terraform Init
          id: init
          run: terraform init -no-color
        
        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color

        - name: Terraform Apply
          if: github.event_name == 'pull_request'
          run: terraform apply -auto-approve
  terraform-production:
    name: "Terraform - Production"
    runs-on: ubuntu-latest
    needs: terraform-staging
    defaults:
      run:
        working-directory: './terraform/production'
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
    - name: "Configure AWS Credentials"
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        aws-region: us-west-2
        aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const validate = ${{ toJson(steps.validate.outputs.stdout) }};
          const plan = ${{ toJson(steps.plan.outputs.stdout) }};

          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n${plan}\`\`\`

          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve