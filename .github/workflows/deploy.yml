name: "Deploy"

on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main

jobs: 
  terraform-production:
    name: "Terraform"
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      security-events: write
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './terraform/production'
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
      with: 
        terraform_version: "1.2.6"
        terraform_wrapper: false
    - name: "Configure AWS Credentials"
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-region: us-west-2
        role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github"
    - run: aws sts get-caller-identity

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color

    - uses: actions/github-script@0.9.0
      if: github.ref != 'refs/heads/main' && github.event_name == 'pull_request' && steps.plan.outputs.stdout != 'null'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const validate = ${{ toJson(steps.validate.outputs.stdout) }};
          const plan = ${{ toJson(steps.plan.outputs.stdout) }};

          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n${plan}\`\`\`

          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure' || steps.fmt.outcome == 'failure'
      run: exit 1

#    - name: Run tfsec
#      uses: tfsec/tfsec-sarif-action@9a83b5c3524f825c020e356335855741fd02745f
#      with:
#        sarif_file: tfsec.sarif         
#
#    - name: Upload SARIF file
#      uses: github/codeql-action/upload-sarif@v1
#      with:
#        # Path to SARIF file relative to the root of the repository
#        sarif_file: tfsec.sarif  

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
  deploy:
    name: "Publish"
    permissions:
      contents: read
      id-token: write
    needs: terraform-production
    if: github.ref == 'refs/heads/main' 
    defaults:
      run: 
        working-directory: "."
    runs-on: ubuntu-latest
    steps: 
      - 
        uses: actions/checkout@v2
      - 
        name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-region: us-west-2
          role-to-assume: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github"
      - 
        name: "Setup themes"
        run: "git submodule update --init --recursive"
      - 
        name: "Update theme to Latest commit"
        run: "git submodule update --remote --merge"
      - 
        name: "Setup hugo"
        uses: peaceiris/actions-hugo@v2
        with: 
          hugo-version: latest
      - 
        name: Build
        run: "hugo --gc --verbose --minify"
      - 
        name: "Deploy static site to S3 bucket"
        run: "aws s3 sync ./public s3://rhill-vcard-website-origin/ --delete --cache-control 'max-age=0, must-revalidate, proxy-revalidate, public'"
